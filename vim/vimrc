" vimrc
" vim: ft=vim tw=140

" stopping sourcing defaults.vim for users without local .vimrc and restore sanity
let skip_defaults_vim=1

" Operating system check {{{
" Checks, if the operating system is Linux
let operatingSystem=system('uname -a')
if operatingSystem =~? "\Linux"
    if operatingSystem =~? "\ARCH"
        runtime! archlinux.vim
    else
        runtime! debian.vim
    endif
endif
" Operating system check }}}

" PLUG Addon-Manager {{{
" Plugin List for 'plug' addon
" Check if 'plug' is installed

if empty(glob('~/.vim/autoload/plug.vim'))
  :echo "Plug is not installed. It will be curled now!"
  !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source /etc/vimrc
  :echo "\n\n Please restart vim after Plug has finished updating!\n\n"
endif

call plug#begin('~/.vim/plugged')


    " Plugs (Addons for PLUG) {{{

        " General {{{
        Plug 'mattn/vim-maketable'              " make markdown tables with `:Maketable`
        Plug 'vim-scripts/ZoomWin'              " hit <Leader>f to fullscreen a vim tab. hit again to return.
                                                " be careful with closing buffers!
        Plug 'AndrewRadev/multichange.vim'
        Plug 'scrooloose/nerdtree'              " Nerdtree
        Plug 'tmux-plugins/vim-tmux'            " vim plugin for .tmux.conf
        Plug 'scrooloose/nerdcommenter'         " comments
        Plug 'godlygeek/tabular'                " needed by plasticboy/vim-markdown
        Plug 'plasticboy/vim-markdown'
        Plug 'google/vim-searchindex'           " how many times a searched pattern occures in current buffer
        Plug 'matze/vim-move'                   " move blobs of code up/down with <C-j>/<C-k>
        Plug 'johngrib/vim-game-code-break'     " a 'fun' game :-)
        Plug 'skywind3000/quickmenu.vim'        " quickmenu
        Plug 'wikitopian/hardmode'              " vim hard mode
        "Plug 'scrooloose/syntastic'             " vim syntax check for maaaany filetypes
        "Plug 'lervag/vimtex'
        "Plug 'Valloric/YouCompleteMe'
        " General }}}

        " Colors {{{
        Plug 'ap/vim-css-color'                 " highlight css colors inside vim
        " Colors }}}

        " GIT {{{
        Plug 'rhysd/committia.vim'              " git commits in vim with diff and log
        Plug 'airblade/vim-gitgutter'           " git commit status side line
        Plug 'Xuyuanp/nerdtree-git-plugin'      " Nerdtree Gitplugin
        " GIT }}}

        " Documentation {{{
        Plug 'vimwiki/vimwiki'                  " VimWiki
        Plug 'suan/vim-instant-markdown'        " instant preview for markdown
        " Documentation }}}

        " Debugging {{{
        " debugging (not debugging vim but debugging features for vim)
        "Plug 'jodosha/vim-godebug'
        "Plug 'fatih/vim-go'
        "Plug 'derekparker/delve'
        " Debugging }}}

        " Themes {{{
        " themes
        Plug 'morhetz/gruvbox'
        Plug 'vim-airline/vim-airline/'         " new status bar
        Plug 'vim-airline/vim-airline-themes'
        " Themes }}}

    " Plugs (Addons for PLUG) }}}

call plug#end()

" PLUG Addon-Manager }}}

" Vim-Instant-Markdown {{{

" By default, vim-instant-markdown will update the display in realtime. If that taxes your system too much, you can specify *slow* before
" loading the plugin (for example place that in your ~/.vimrc). This will cause vim-instant-markdown to only refresh on the following
" events:
"   - No keys have been pressed for a while
"   - A while after you leave insert mode
"   - You save the file being edited
"let g:instant_markdown_slow = 1

" By default, vim-instant-markdown will automatically launch the preview window when you open a markdown file. If you want to manually
" control this behavior, you can specify *no autostart* in your .vimrc. You can then manually trigger preview via the command
" :InstantMarkdownPreview. This command is only available inside markdown buffers and when the autostart option is turned off.
let g:instant_markdown_autostart = 0
map <leader>md :InstantMarkdownPreview<CR>

" By default, the server only listens on localhost. To make the server available to others in your network, edit your .vimrc and add *this*
" !!! Only use this setting on trusted networks !!!
let g:instant_markdown_open_to_the_world = 0

" By default, scripts are blocked. To allow scripts to run, edit your .vimrc and add
let g:instant_markdown_allow_unsafe_content = 0

" Vim-Instant-Markdown }}}

" VimWiki {{{

" vimwiki with markdown support
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

" `vim index.md`
"
" # hotkeys
" Enter - create a new note (cursor must be on a word)
" Enter - enter into the note
" Backspace - Go back
" <leader>md - Open Markdown preview on web browser


" VimWiki }}}

" spell checking {{{
" automatically activate spell checking for the following file types
au BufNewFile,BufRead,BufEnter   *.wiki    setlocal spell    spelllang=de_de
au BufNewFile,BufRead,BufEnter   *.md      setlocal spell    spelllang=de_de
au BufNewFile,BufRead,BufEnter   README*   setlocal spell    spelllang=en_us
" spell checking }}}

" QuickMenu {{{

" clear all the items (init)
call quickmenu#reset()

" bind to <leader>mt (in case of this vimrc: '\mt')
noremap <silent><leader>mt :call quickmenu#toggle(0)<cr>

" enable cursorline (L) and cmdline help (H)
let g:quickmenu_options = "HL"

    " New Section {{{
    " this can be seen as a template
    "call quickmenu#append("# Git", '')
    " New Section }}}

    " Fugitive {{{
    " use fugitive to show diff
    "call quickmenu#append("git diff", 'Gvdiff', "use fugitive's Gvdiff on current document")
    "call quickmenu#append("git status", 'Gstatus', "use fugitive's Gstatus on current document")
    " Fugitive }}}

    " Layout / Visual {{{
    call quickmenu#append("# Layout / Visual"                              , '')
    call quickmenu#append("zoom Window"                                    , ':ZoomWin'                    , "zoom current buffer")
    call quickmenu#append("cursor column: %{&colorcolumn}"                 , ':call MySecondColorColumn()' , "Displays a defined column and break line at that column if enabled")
    call quickmenu#append("File Explorer"                                  , ':NERDTreeToggle'             , "Open Nerdtree, a file explorer")
    call quickmenu#append("turn Cursorline %{&cursorline? 'off':'on'}"     , ':set cursorline!'            , "Enable/Disable Cursorline")
    call quickmenu#append("turn Cursorcolumn %{&cursorcolumn? 'off':'on'}" , ':set cursorcolumn!'          , "Enable/Disable Cursorcolumn")
    call quickmenu#append("turn List Chars %{&list? 'off':'on'}"           , ':set list!'                  , "will toggle showing invisible characeters, such as whitespaces")
    " Layout / Visual }}}

    " Code/Text Format {{{
    call quickmenu#append("# Text Format"           , '')
    call quickmenu#append("retab"                   , ':retab'                          , "Transform Tabulators to Whitespaces if possible")
    call quickmenu#append("rem. tr. Whitespaces"    , ':call TrailingWhitespaces()'     , "Remove trailing Whitespaces")
    call quickmenu#append("set linebreak: %{&tw}"   , ':call MyTextWidth()'             , "Set the current textwidth")
    call quickmenu#append("Show color under Cursor" , ':call ShowHexColorUnderCursor()' , "show hex color under cursor")
    " Code/Text Format }}}

    " Spell Checking {{{
    call quickmenu#append("# Spell Checker", '')
    call quickmenu#append("Spell Checker on/off" , ':setlocal spell!'          , "Toggles spell checking on and off")
    call quickmenu#append("Language: English"    , ':setlocal spelllang=en_us' , "Switch spell checker language to English")
    call quickmenu#append("Language: German"     , ':setlocal spelllang=de_de' , "Switch spell checker language to German")
    " Spell Checking }}}

    " Advanced Vim Usage {{{
    call quickmenu#append("# Advanced Stuff" , '')
    call quickmenu#append("Enable HardMode"  , ':call HardMode()' , "Enables vim hard mode")
    call quickmenu#append("Disable HardMode" , ':call EasyMode()' , "Enables vim hard mode")
    " Advanced Vim Usage }}}

    " Compiler {{{
    call quickmenu#append("# Compiler"                                 , '')
    call quickmenu#append("Markdown" , "!exec pandoc -o %.pdf %"   , "enable/disable spell check (:set spell!)")
    " Compiler }}}

    " Misc {{{
    call quickmenu#append("# Misc"                                 , '')
    call quickmenu#append("turn paste %{&paste? 'off':'on'}"       , "set paste!"   , "enable/disable paste mode (:set paste!)")
    call quickmenu#append("turn spell check %{&spell? 'off':'on'}" , "set spell!"   , "enable/disable spell check (:set spell!)")
    "call quickmenu#append("Function List"                         , "TagbarToggle" , "Switch Tagbar on/off")
    " Misc }}}

    " Maintenance {{{
    call quickmenu#append("# Maintenance", '')
    call quickmenu#append("Open vimrc", ':tabnew /etc/vimrc', "Opens the vimrc in a new tab")
    " Maintenance }}}

" QuickMenu }}}

" Vim Hard Mode {{{
" automatically enable hard mode when entering vim
"autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
" Vim Hard Mode }}}

" MARKDOWN SYNTAX PLUGIN 'VIM-MARKDOWN' {{{
" disable folding
let g:vim_markdown_folding_disabled = 0
" Allow for the TOC window to auto-fit when it's possible for it to shrink. It never
" increases its default size (half screen), it only shrinks.
let g:vim_markdown_toc_autofit = 1
" MARKDOWN SYNTAX PLUGIN 'VIM-MARKDOWN' }}}

" syntastic settings {{{
" does not show anything until yet, needs to be checked! maybe because of
" vim-airline
"set statusline+=%#warningsmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
" syntastic settings }}}

" Indention rules {{{
" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif
" Indention rules }}}

" Nerdtree {{{
" If vim opens a directory like 'vim /etc/tmp' nerdtree will start
" automatically
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Toggle Nerdtree on/off
nmap <Leader>n :NERDTreeToggle<CR>
" Nerdtree }}}

" disable mouse {{{
"set mouse=""        " Enable mouse usage
                    " n     Normal mode
                    " v     Visual mode
                    " i     Insert mode
                    " c     Command-line mode
                    " h     all previous modes when editing a help file
                    " a     all previous modes
                    " r     for |hit-enter| and |more-prompt| prompt
                    " `empty-string` for no mouse support at all

" not a beautiful solution to disable mouse support, but with only 'set mouse=' or
" 'set mouse=""' it will only work , if i reload the vimrc with 'source %'.
autocmd BufEnter * set mouse=
" disable mouse }}}

" Saner line joins {{{
if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j
endif
" Saner line joins }}}

" Syntax check {{{
if has("syntax")
  syntax on
endif
" Syntax check }}}

" automatically source the .vimrc {{{
augroup autosourcing
    autocmd!
    autocmd BufWritePost /etc/vimrc source %
augroup END
" automatically source the .vimrc }}}

" Auto set screen title {{{
" i'm not sure, if this works
let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"
if &term =~ "xterm" || &term == "screen" || &term == "rxvt"
  set title
endif
" Auto set screen title }}}

" fast terminal? {{{
" as far as I understand, the screen updates (redrawings) will be set to
" character-wise instead of linewise. should be faster, i suppose and much mor
" fluent
set ttyfast
" fast terminal? }}}

" Filetype Options {{{

    " lua {{{
    autocmd FileType lua setlocal shiftwidth=2
    autocmd FileType lua setlocal tabstop=2
    " }}}

    " lilypond {{{
    autocmd FileType lilypond setlocal shiftwidth=2
    autocmd FileType lilypond setlocal tabstop=2
    " }}}

" Filetype Options }}}

" General Settings {{{

    " Encoding
    scriptencoding utf-8
    set encoding=utf-8

    " Dark Background
    set background=dark

    " Paper Format
    set printoptions=paper:A4

    " highlight search matches
    set hlsearch

    " show at least 7 lines below or above the current line, except, if reaching
    " the bottom or the top of the file
    set scrolloff=5

    " show at least 20  characters to each side of the cursor, except, if reaching
    " beginning or end of line. if reaching beginning / end of line, scroll one
    " character to each direction
    set sidescrolloff=20
    set sidescroll=1

    " use \C for case-sensitive search, like '/\CJava' to search for 'Java', 'java' will not be found.
    set ignorecase

    " whitespaces instead of tabulators
    set expandtab

    " default tab size (4 whitespaces)
    set tabstop=4
    set shiftwidth=4

    " listchars
    "   ¶¤¤¤  : tabulators
    "   ·     : whitespaces
    "   <     : preceds
    "   >     : extends
    set list listchars=tab:¶¤,trail:·,extends:>,precedes:<
    set list

    " do not erase background
    set t_ut=

    " Folding
    set fdm=marker      " fold method
    set fdc=4           " fold column width

    " reads the file when changes where made out of vim (e.g. git)
    set autoread

    " Set which parantheses to match
    set matchpairs=(:),{:},[:],<:>


    " Show matching brackets
    set showmatch


    " Highlight lines longer than 120 characters
    match ErrorMsg '\%>120v.\+'

    " Highlight trailing whitespaces
    match ErrorMsg '\s\+$'

    " Do not erase background
    set t_ut=

    " Command line history
    set history=9999

    " Symbol for wrapped lines
    let &showbreak=' '

    " No line wrapping
    set nowrap

    " encryption
    set cm=blowfish

    " Line Numbers
    set numberwidth=4
    set relativenumber
    set number

" General Settings }}}

" Functions {{{

    " Remove trailing whitespaces {{{
    function! TrailingWhitespaces()
        :%s/\s\+$//e
    endfunction
    " Remove trailing whitespaces }}}

    " Textwidth {{{
    " function for textwidth
    function! MyTextWidth()
        execute "setlocal tw =".str2nr(input('Enter column number: '))
    endfunction
    " Textwidth }}}

    " Colorcolumn {{{
    " function for toggelling colorcolumn with individual value
    function! MySecondColorColumn()
        let mycolval = str2nr(input('Enter column number: '))

        if mycolval == 0
            setlocal colorcolumn&
        else
            execute "setlocal colorcolumn=".mycolval
        endif
    endfunction
    " Colorcolumn }}}

    " jump to first / last character of line or beginning / end of line {{{

        " home-zero {{{
        " key '0' toggles between first non whitespace character and first column in line
        function! ToggleHomeZero()
            let pos = getpos('.')
            execute "normal! ^"
            if pos == getpos('.')
                execute "normal! 0"
            endif
        endfunction
        " home-zero }}}

        " end-infinity {{{
        function! ToggleEndInfinity()
            let pos = getpos('.')
            execute "normal! $"
            if pos == getpos('.')
                execute "normal! g_"
            endif
        endfunction
        " end-infinity }}}

    " jump to first / last character of line or beginning / end of line }}}

" Functions }}}

" Keybindings {{{

    " tabular shorcut
    " the syntax would be `:Tabularize /,` to split a visual selected paragraph by 'comma'. Use `:Tabularize /;` to
    " split by 'semicolon'.
    " You need to press enter afterwards.
    vmap <Leader>tab :Tabularize /

    " multichange, type \m after selectig text in visual mode
    vmap <Leader>m :Multichange<CR>

    " map ShowHexColorUnderCursor
    map <F3> :call ShowHexColorUnderCursor()<CR>

    " move to next file (e.g. if you opend files like `vim *`)
    map <F1> :N<cr>
    map <F2> :n<cr>

    " jump to first character/number in line or beginning of line
    nnoremap <silent> 0 :call ToggleHomeZero()<CR>

    " jump to last character/number in line or end of line
    nnoremap <silent> $ :call ToggleEndInfinity()<CR>

    " reselect visual block after indent visual with > or <
    vnoremap < <gv
    vnoremap > >gv

    " ZoomWin
    noremap <Leader>f :ZoomWin<CR>

    " vim-move modifier key (control key, in this case)
    let g:move_key_modifier = 'C'

    " Switch tabs with tab key
    nmap <Tab> gt
    nmap <S-Tab> gT

    " Press F12 to trigger LaTeX Makefile and open pdf
    nnoremap <buffer> <F12> :w<CR>:!make<CR>:!evince %:t:r.pdf<CR>

    " myhelp (hringriin)
    nmap <Leader>h :tab :h hringriin<CR>

    " edit vimrc with typing \ev while \ is the current leader character
    nmap <Leader>ev :tabnew /etc/vimrc<CR>

    " temporarily disable hlsearch
    nmap <Leader>s :noh<CR>

    " Keybinding for sorting under visual block
    map <F8> :'<,'>sort /\ze\%V/<CR>

" Keybindings }}}

" Settings / Options that need to be testet {{{

    " Don't wake up system with blinking cursor: {{{
    " ... whatever that means ... :)
    " http://www.linuxpowertop.org/known.php
    "let &guicursor = &guicursor . ",a:blinkon0"
    " Don't wake up system with blinking cursor: }}}

    " Clipboard {{{
    "set clipboard=unnamedplus
    "set guioptions+=a
    " Clipboard }}}

    " Automatically write pair of parentheses {{{
    " in insert mode, press ( to achieve (  )
    " notice the two whitespaces between the parentheses
    "inoremap ( ()<Left><Space><Space><Left>
    " Automatically write pair of parentheses }}}

    " lilypond {{{
    " in '/usr/share/vim/vimfiles/ftplugin/lilypond.vim' is written the following
    " line:
    "map <buffer> <F6> :!gv --watch "%<.ps" &<Return>
    " I change the programm used to my own needs
    "map <buffer> <F6> :!evince "%<.pdf" &<Return>
    " lilypond }}}

" Settings / Options that need to be testet }}}

" Colorscheme {{{

" Colorscheme set to 'gruvbox'
" https://github.com/morhetz/gruvbox

" only apply gruvbox scheme, if running X
if &term=~'xterm'
    let g:gruvbox_contrast_dark='hard'
    colorscheme gruvbox

    " vim-airline {{{
    " the following will be done by vim-airline from now on
    set noshowmode          " information about current vim mode (insert, replace, ...)
    set noruler             " disable vim's default status line
    set laststatus=0
    set noshowcmd
    set report=0            " Show all changes (e.g. how many lines yanked)

        " airline config {{{
        set laststatus=2
        let g:airline_powerline_fonts=1
        let g:airline_theme='gruvbox'
        let g:airline_detect_iminsert=1
        " airline config }}}

    " vim-airline }}}

endif

" preparation for vim-airline {{{
" preparation for vim-airline }}}

    " custom colors {{{
    " i have no clue, why those colors are not set even if they are put AFTER
    " setting the colorscheme

        " spell check {{{
        hi SpellBad     term=standout   cterm=bold      ctermfg=223     ctermbg=88
        hi SpellCap     term=standout   cterm=bold      ctermfg=223     ctermbg=66
        hi SpellRare    term=standout   cterm=bold      ctermfg=223     ctermbg=108
        hi SpellLocal   term=standout   cterm=bold      ctermfg=237     ctermbg=214
        " spell check }}}

        " custom fold color {{{
        hi Folded       term=standout   cterm=italic    ctermfg=63      ctermbg=237
        hi FoldColumn   term=standout   cterm=italic    ctermfg=63      ctermbg=237
        " custom fold color }}}

        " non-text color {{{
        hi NonText              term=bold   cterm=bold      ctermfg=10
        " non-text color }}}

        " custom line colors {{{
        hi LineNr               term=bold   cterm=bold      ctermfg=115
        hi CursorLineNr         term=bold   cterm=bold      ctermfg=115  ctermbg=234
        " custom line colors }}}

    " custom colors }}}

" Colorscheme }}}

" Typo correction {{{
iab dsa         das
iab alos        also
iab laso        also
iab acuh        auch
iab bracuht     braucht
iab nciht       nicht
iab ICh         Ich
iab shc         sch
iab amchen      machen
iab amche       mache
iab Latex       LaTeX
iab latex       LaTeX
iab etwsa       etwas
iab wsa         was
" Typo correction }}}

" vim is geil
