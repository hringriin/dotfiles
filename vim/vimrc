" Checks, if the operating system is linux
let operatingSystem=system('uname -a')
if operatingSystem =~? "\Linux"
    if operatingSystem =~? "\ARCH"
        runtime! archlinux.vim
    else
        runtime! debian.vim
    endif
endif

"########################################################################################

" Plugin List for 'plug' addon
" Check if 'plug' is installed

if empty(glob('~/.vim/autoload/plug.vim'))
  :echo "Plug is not installed. It will be curled! now"
  !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source /etc/vimrc
  :echo "\n\n Please restart vim after Plug has finished updating!\n\n"
endif

call plug#begin('~/.vim/plugged')

Plug 'rhysd/committia.vim'
Plug 'mattn/vim-maketable'
Plug 'vim-scripts/ZoomWin'
Plug 'AndrewRadev/multichange.vim'
Plug 'scrooloose/nerdtree'              " Nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin'      " Nerdtree Gitplugin
Plug 'vim-airline/vim-airline/'         " new status bar
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdcommenter'         " comments
Plug 'airblade/vim-gitgutter'           " git commit status side line
Plug 'godlygeek/tabular'                " needed by plasticboy/vim-markdown
Plug 'plasticboy/vim-markdown'
"Plug 'scrooloose/syntastic'             " vim syntax check for maaaany filetypes
"Plug 'lervag/vimtex'
"Plug 'Valloric/YouCompleteMe'

" debugging (not debugging vim but debugging features for vim)
"Plug 'jodosha/vim-godebug'
"Plug 'fatih/vim-go'
"Plug 'derekparker/delve'

" themes
Plug 'morhetz/gruvbox'

call plug#end()

"########################################################################################

" globally disable foldings
set nofoldenable

" MARKDOWN SYNTAX PLUGIN 'VIM-MARKDOWN'
" disable folding
let g:vim_markdown_folding_disabled = 1
" Allow for the TOC window to auto-fit when it's possible for it to shrink. It never
" increases its default size (half screen), it only shrinks.
let g:vim_markdown_toc_autofit = 1

" syntastic settings
" does not show anything until yet, needs to be checked! maybe because of
" vim-airline
"set statusline+=%#warningsmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0

" Nerdtree
" If vim opens a directory like 'vim /etc/tmp' nerdtree will start
" automatically
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Toggle Nerdtree on/off
nmap <Leader>n :NERDTreeToggle<CR>

" encoding
scriptencoding utf-8
set encoding=utf-8

" edit vimrc with typing \ev while \ is the current leader character
nmap <Leader>ev :tabnew /etc/vimrc<CR>

"set clipboard=unnamedplus
"set guioptions+=a

" do not erase background
set t_ut=

" Command line history
set history=9999

" automatically source the .vimrc
augroup autosourcing
    autocmd!
    autocmd BufWritePost /etc/vimrc source %
augroup END

" Symbol for wrapped lines
set showbreak=

" No line wrapping
set nowrap

" encryption
set cm=blowfish

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

" vim-airline will do this from now on
set noshowmode
set noruler
set laststatus=0
set noshowcmd

" Press F12 to trigger Makefile
nnoremap <buffer> <F12> :w<CR>:!make<CR>

" in insert mode, press ( to achieve (  )
" notice the two whitespaces between the parentheses
"inoremap ( ()<Left><Space><Space><Left>

" Shortcut to switch between splits
" Press <CTRL> + [lhjk] to switch to left,right,lower,upper split
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k

" Shortcut to resize splits
" Press <CTRL> + <SHIFT> + [lhjk] to expand or shring in each direction
" Press <CTRL> + <SHIFT> + <SPACE> to equalize
"vnoremap <A-h> <C-<>
"vnoremap <A-j> <C->>
"vnoremap <A-k> <C-+>
"vnoremap <A-l> <C-->
"vnoremap <A-space> <C-w>=

if has("syntax")
  syntax on
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showmatch       " Show matching brackets.
"set mouse=""        " Enable mouse usage
                    " n     Normal mode
                    " v     Visual mode
                    " i     Insert mode
                    " c     Command-line mode
                    " h     all previous modes when editing a help file
                    " a     all previous modes
                    " r     for |hit-enter| and |more-prompt| prompt
                    " `empty-string` for no mouse support at all

" not a beautiful solution to disable mouse support, but with only 'set mouse=' or
" 'set mouse=""' it will only work , if i reload the vimrc with 'source %'.
autocmd BufEnter * set mouse=

" reads the file when changes where made out of vim (e.g. git)
set autoread

" Show all changes (e.g. how many lines yanked)
set report=0

" Set which parantheses to match
set matchpairs=(:),{:},[:],<:>

" fast terminal?
" as far as I understand, the screen updates (redrawings) will be set to
" character-wise instead of linewise. should be faster, i suppose and much mor
" fluent
set ttyfast

"#################################################################################################################################################

" ################
" German umlauts #
" ################

function! RemoveIMappingIfExists(mapping)
  try
    execute 'iunmap' a:mapping
  catch /E31/
  endtry
endfunction

function! RemoveUmlautsOtherwise(mappings)
  for pair in a:mappings
    execute 'autocmd' 'FileType,BufEnter,BufLeave' '*' 'call' "RemoveIMappingIfExists('". pair[0] ."')"
  endfor
endfunction

function! SetUmlautMappings(filetype)
  for [map_from, map_to]  in g:umlaut_mappings
    call SetUmlautMapping(a:filetype, map_from, map_to)
  endfor
endfunction

function! SetUmlautMapping(filetype, map, mapped)
  let current_filetype = &filetype
  if current_filetype == a:filetype
    execute 'inoremap' a:map a:mapped
  endif
endfunction

command! -nargs=1 SetUmlautMappings call SetUmlautMappings(<f-args>)

function! ImplementUmlauts()
  augroup umlauts
    call RemoveUmlautsOtherwise(g:umlaut_mappings)
    for file_type in g:file_types
      execute 'autocmd' 'FileType' file_type 'SetUmlautMappings' file_type
      execute 'autocmd' 'BufEnter,BufLeave' '*' 'SetUmlautMappings' file_type
    endfor
  augroup end
endfunction

" german umlauts, technically not abbreviations
let g:umlaut_mappings = [ ['"a', '<c-k>a:'], ['"o', '<c-k>o:'], ['"u', '<c-k>u:'], ['"A', '<c-k>A:'], ['"O', '<c-k>O:'], ['"U', '<c-k>U:'] ]
let g:file_types = ['mkd', 'tex', 'text', 'mail', 'gitcommit', 'markdown', 'md']

call ImplementUmlauts()

" END UMLAUTS
"#################################################################################################################################################

" highlight search matches
set hlsearch

" whitespaces instead of tabulators
set expandtab

" default tab size (4 whitespaces)
set tabstop=4
set shiftwidth=4

" Filetype Options
autocmd FileType lua setlocal shiftwidth=2
autocmd FileType lua setlocal tabstop=2

" tabs werden als ¶¤¤¤ und Whitespaces als · angezeigt
set list listchars=tab:¶¤,trail:·,extends:>,precedes:<
set list

" Toggle listchars
function! ToggleListChars()
    set list!
endfunction

" KeyBinding for ToggleListChars
" will toggle showing invisible character, such as whitespaces
map <F5> :call ToggleListChars()<CR>

" Keybinding for sorting under visual block
map <F6> :'<,'>sort /\ze\%V/<CR>

set numberwidth=4
set relativenumber
set number

" Remove trailing whitespaces
function! TrailingWhitespaces()
    :%s/\s\+$//e
endfunction

" KeyBinding for TrailingWhitespaces
map <F2> :call TrailingWhitespaces()<CR>

" KeyBinding for Retabbing
map <F1> :retab<CR>

" Keymapping for Toggle Cursorline and -column
map <F3> :set cursorcolumn!<Bar>set cursorline!<CR>

" Function for toggelling colorcolumn 90
function! MyColorColumn()
    if &colorcolumn != ''
        setlocal colorcolumn&
    else
        setlocal colorcolumn=90
    endif
endfunction

" Keymapping for Toggle Linemarker for max line 90
map <F4> :call MyColorColumn()<CR>

" Ignore case when searching
" use \C for case-sensitive search, like '/\CJava' to search for 'Java'
set ignorecase

" show at least 7 lines below or above the current line, except, if reaching
" the bottom or the top of the file
set scrolloff=7
set sidescroll=30

" key '0' toggles between first non whitespace character and first column in line
function! ToggleHomeZero()
    let pos = getpos('.')
    execute "normal! ^"
    if pos == getpos('.')
        execute "normal! 0"
    endif
endfunction
nnoremap <silent> 0 :call ToggleHomeZero()<CR>

" reselect visual block after indent/outdent indent visual
" select a couple of lines with VISUAL LINE and then press > one or two times
" to see what this does. it's pretty awesome :-)
vnoremap < <gv
vnoremap > >gv

" ZoomWin
noremap <Leader>f :ZoomWin<CR>

" Colorscheme set to 'gruvbox'
" https://github.com/morhetz/gruvbox
" See the wiki in on github regarding
" the two following lines
set background=dark
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox

" vim-airline
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline_theme='gruvbox'
let g:airline_detect_iminsert=1

"hi NonText        term=bold  cterm=bold  ctermfg=darkblue  gui=bold      guifg=#cc0000
"hi LineNr         term=underline  cterm=bold  ctermfg=darkcyan  guifg=Yellow

" Typo correction
iab dsa         das
iab alos        also
iab laso        also
iab acuh        auch
iab bracuht     braucht
iab nciht       nicht
iab ICh         Ich
iab shc         sch
iab amchen      machen
iab amche       mache
iab Latex       LaTeX
iab latex       LaTeX
