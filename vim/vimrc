set clipboard=unnamedplus
set guioptions+=a

" Command line history
set history=500

" No line wrapping
:set nowrap

" encryption
:set cm=blowfish

" Show the cursor position all the time
set ruler

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

" Checks, if the operating system is linux
let operatingSystem=system('uname -a')
:if operatingSystem =~? "\Linux"
:    if operatingSystem =~? "\ARCH"
:        runtime! archlinux.vim
:    endif
:endif

" Press F12 to trigger Makefile
nnoremap <buffer> <F12> :w<CR>:!make<CR>

" place/remove # at the beginning of the current/visual selected line
vnoremap ibc :s/^/#/g<CR>:let @/ = ""<CR>
vnoremap iBc :s/^#//g<CR>:let @/ = ""<CR>

" place/remove // at the beginning of the current/visual selected line
vnoremap ijc :s/^/\/\//g<CR>:let @/ = ""<CR>
vnoremap iJc :s/^\/\///g<CR>:let @/ = ""<CR>

" place/remove " at the beginning of the current/visual selected line
vnoremap ivc :s/^/"/g<CR>:let @/ = ""<CR>
vnoremap iVc :s/^"//g<CR>:let @/ = ""<CR>

" in insert mode, press ( to achieve (  )
" notice the two whitespaces between the parentheses
"inoremap ( ()<Left><Space><Space><Left>

" Shortcut to switch between splits
" Press <CTRL> + [lhjk] to switch to left,right,lower,upper split
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k

" Shortcut to resize splits
" Press <CTRL> + <SHIFT> + [lhjk] to expand or shring in each direction
" Press <CTRL> + <SHIFT> + <SPACE> to equalize
vnoremap <A-h> <C-<>
vnoremap <A-j> <C->>
vnoremap <A-k> <C-+>
vnoremap <A-l> <C-->
vnoremap <A-space> <C-w>=

scriptencoding utf-8
set encoding=utf-8

if has("syntax")
  syntax on
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd         " Show (partial) command in status line.
set showmatch       " Show matching brackets.
set mouse=""        " Enable mouse usage
                    " n     Normal mode
                    " v     Visual mode
                    " i     Insert mode
                    " c     Command-line mode
                    " h     all previous modes when editing a help file
                    " a     all previous modes
                    " r     for |hit-enter| and |more-prompt| prompt
                    " `empty-string` for no mouse support at all

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" German umlauts #
" ################

function! RemoveIMappingIfExists(mapping)
  try
    execute 'iunmap' a:mapping
  catch /E31/
  endtry
endfunction

function! RemoveUmlautsOtherwise(mappings)
  for pair in a:mappings
    execute 'autocmd' 'FileType,BufEnter,BufLeave' '*' 'call' "RemoveIMappingIfExists('". pair[0] ."')"
  endfor
endfunction

function! SetUmlautMappings(filetype)
  for [map_from, map_to]  in g:umlaut_mappings
    call SetUmlautMapping(a:filetype, map_from, map_to)
  endfor
endfunction

function! SetUmlautMapping(filetype, map, mapped)
  let current_filetype = &filetype
  if current_filetype == a:filetype
    execute 'inoremap' a:map a:mapped
  endif
endfunction

command! -nargs=1 SetUmlautMappings call SetUmlautMappings(<f-args>)

function! ImplementUmlauts()
  augroup umlauts
    call RemoveUmlautsOtherwise(g:umlaut_mappings)
    for file_type in g:file_types
      execute 'autocmd' 'FileType' file_type 'SetUmlautMappings' file_type
      execute 'autocmd' 'BufEnter,BufLeave' '*' 'SetUmlautMappings' file_type
    endfor
  augroup end
endfunction

" german umlauts, technically not abbreviations
let g:umlaut_mappings = [ ['"a', '<c-k>a:'], ['"o', '<c-k>o:'], ['"u', '<c-k>u:'], ['"A', '<c-k>A:'], ['"O', '<c-k>O:'], ['"U', '<c-k>U:'] ]
let g:file_types = ['mkd', 'tex', 'text', 'mail', 'gitcommit', 'markdown', 'md']

call ImplementUmlauts()

" END UMLAUTS


" highlight search matches
:set hlsearch

" whitespaces statt tabs
:set expandtab

" tabgroesse
:set tabstop=4
:set shiftwidth=4

" tabs werden als ¶¤¤¤ und Whitespaces als · angezeigt
:set list listchars=tab:¶¤,trail:·,extends:>,precedes:<
:set list

" Toggle listchars
function! ToggleListChars()
    :set list!
endfunction

" KeyBinding for ToggleListChars
:map <F5> :call ToggleListChars()<CR>

" Keybinding for sorting under visual block
:map <F6> :'<,'>sort /\ze\%V/<CR>

:set numberwidth=4
:set relativenumber
:set number
:hi CursorLineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" Remove trailing whitespaces
function! TrailingWhitespaces()
    :%s/\s\+$//e
endfunction

" KeyBinding for TrailingWhitespaces
:map <F2> :call TrailingWhitespaces()<CR>

" KeyBinding for Retabbing
:map <F1> :retab<CR>

" Filetype Options
autocmd FileType lua setlocal shiftwidth=2
autocmd FileType lua setlocal tabstop=2

:let myGray="2"

" Cursor Highlighting
":hi CursorLine term=bold cterm=bold ctermbg=6 guibg=6
":hi CursorColumn term=NONE cterm=NONE ctermbg=6 guibg=6
":hi ColorColumn term=NONE cterm=NONE ctermbg=5 guibg=5

" Keymapping for Toggle Cursorline and -column
:map <F3> :set cursorcolumn!<Bar>set cursorline!<Bar>:call MyColorColumn()<CR>

" Function for toggelling colorcolumn 90
function! MyColorColumn()
    if &colorcolumn != ''
        setlocal colorcolumn&
    else
        setlocal colorcolumn=90
    endif
endfunction

" Keymapping for Toggle Linemarker for max line 90
:map <F4> :call MyColorColumn()<CR>

" Ignore case when searching
" use \C for case-sensitive search, like '/\CJava' to search for 'Java'
:set ignorecase

" Offset fuer Sichtbarkeit der Zeilen, immer mindestens 10 Zeilen nach oben
" oder unten gemessen vom Cursor, ausser Top / Bottom
:set scrolloff=7

" tabbing and splitting customization
" switch to left split
":nnoremap <c-h> <Ctrl>v <c-w> h

" switch to right split
":nnoremap <c-l> <Ctrl>v <c-w> l

" key '0' toggle between first non whitespace character and first column in
" line
function! ToggleHomeZero()
    let pos = getpos('.')
    execute "normal! ^"
    if pos == getpos('.')
        execute "normal! 0"
    endif
endfunction
nnoremap 0 :call ToggleHomeZero()<CR>

" reselect visual block after indent/outdent indent visual
vnoremap < <gv
vnoremap > >gv

" Plugin List for 'plug' addon
" Check if 'plug' is installed

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source /etc/vimrc
endif

call plug#begin('~/.vim/plugged')
Plug 'rhysd/committia.vim'
Plug 'mattn/vim-maketable'
Plug 'altercation/vim-colors-solarized'
"Plug 'lervag/vimtex'
"Plug 'Valloric/YouCompleteMe'
Plug 'YorickPeterse/happy_hacking.vim'
Plug 'morhetz/gruvbox'
call plug#end()


" Colorscheme set to 'gruvbox'
" https://github.com/morhetz/gruvbox
" See the wiki in on github regarding
" the two following lines
set background=dark
let g:gruvbox_contrast_dark='hard'
colorscheme gruvbox
